// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220531.1

#pragma once
#ifndef WINRT_AsioSDK_0_H
#define WINRT_AsioSDK_0_H
WINRT_EXPORT namespace winrt::AsioSDK
{
    struct IClass;
    struct Class;
}
namespace winrt::impl
{
    template <> struct category<winrt::AsioSDK::IClass>{ using type = interface_category; };
    template <> struct category<winrt::AsioSDK::Class>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::AsioSDK::Class> = L"AsioSDK.Class";
    template <> inline constexpr auto& name_v<winrt::AsioSDK::IClass> = L"AsioSDK.IClass";
    template <> inline constexpr guid guid_v<winrt::AsioSDK::IClass>{ 0x7E509D19,0x0DD1,0x5BD6,{ 0x9C,0x88,0x16,0xB5,0x7A,0xD2,0x59,0xF7 } }; // 7E509D19-0DD1-5BD6-9C88-16B57AD259F7
    template <> struct default_interface<winrt::AsioSDK::Class>{ using type = winrt::AsioSDK::IClass; };
    template <> struct abi<winrt::AsioSDK::IClass>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_AsioSDK_IClass
    {
        [[nodiscard]] auto MyProperty() const;
        auto MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::AsioSDK::IClass>
    {
        template <typename D> using type = consume_AsioSDK_IClass<D>;
    };
}
#endif
